---
- set_fact:
    mysql_root_pass: "{{ mysql.root.pass }}"
  when: mysql.root.pass
- name: get database root password or generate one if none specified
  shell:
    (awk -F'"' '/^password/{print $2;exit;}' /root/.my.cnf) ||
    (</dev/urandom LC_ALL=C sed -r 'N;s/[^[:print:]]|[\s"]//g' | head -c 32)
  changed_when: False
  register: mysql_root_pass
  when: not mysql.root.pass
- set_fact:
    mysql_root_pass: "{{ mysql_root_pass.stdout }}"
  when: mysql_root_pass.stdout

- name: set database root password
  mysql_user:
    name: "root"
    host: "{{ item }}"
    password: "{{ mysql_root_pass }}"
  with_items:
    - ::1
    - 127.0.0.1
    - localhost # needs to be last for idempotency

- name: remove generic database users
  mysql_user:
    name: "{{ item.user }}"
    host: "{{ item.host }}"
    state: "absent"
  with_items:
    - { user: root, host: "{{ ansible_hostname }}" }

- name: push /root/.my.cnf
  template:
    src=root/.my.cnf.j2
    dest=/root/.my.cnf
    mode=0600

- name: fetch generated /root/.my.cnf from master
  fetch:
    src=/root/.my.cnf
    dest=tmp/.my.cnf
    flat=yes
  when: mysql.replication.role == "master"

# Replication ################################################################
- name: get database replication password or generate one
  shell: echo -n '{{ mysql_root_pass }}' | md5sum | awk '{print $1}'
  when: mysql.replication.role == "master" and not mysql.replication.user.pass
  register: mysql.replication.user.pass_command
  changed_when: False
- set_fact: mysql.replication.user.pass={{ mysql.replication.user.pass_command.stdout }}
  when: >
    mysql.replication.user.pass is not defined
    and
    mysql.replication.user.pass_command is defined


- name: ensure replication user exists on master
  mysql_user:
    name: "{{ mysql.replication.user.name }}"
    host: "{{ mysql.replication.user.host }}"
    password: "{{ mysql.replication.user.pass }}"
    priv: "{{ mysql.replication.user.priv }}"
  when: >
    mysql.replication.role == "master"
    and
    mysql.replication.user.name
    and
    mysql.replication.master

- name: generate server-id (eth0 IPv4 as long)
  shell:
    ip -o -4 a s eth0 |
    awk '{sub(/\/.*/, "", $4);split($4, a, "."); print a[1]*256^3 + a[2]*256^2 + a[3]*256 + a[4]; exit}'
  changed_when: False
  register: mysql_server_id

- name: put system-wide my.cnf
  template:
    src=etc/mysql/my.cnf.j2
    dest=/etc/mysql/my.cnf
  register: last_result

- name: restart mysql
  service:
    name=mysql
    state=restarted
  when: last_result.changed

- name: export master dump file
  shell: mysqlrepldump.sh | gzip > /tmp/mysqldump.sql.gz
  when: mysql.replication.role == "master"

- name: fetch master dump file
  fetch:
    src=/tmp/mysqldump.sql.gz
    dest=tmp/mysqldump.sql.gz
    flat=yes
  when: mysql.replication.role == "master"

- name: upload master dump file on slave
  copy:
    src=tmp/mysqldump.sql.gz
    dest=/tmp/mysqldump.sql.gz
  when: mysql_repl_role == "slave"

- name: check slaves status
  mysql_replication: mode=getslave
  ignore_errors: true
  register: slave_status
  when: mysql.replication.role == "slave"

- name: stop replication on slave
  mysql_replication: mode=stopslave
  when: >
    mysql.replication.role == "slave"
    and
    (slave_status | failed or slave_status.Slave_SQL_Running != "Yes")


- name: get mysql replication user password
  local_action:
    shell awk -F'"' '/^password/{printf "%s", $2;exit}' .my.cnf | md5sum | awk '{print $1}'
  sudo: False
  changed_when: False
  when: >
    mysql.replication.role == "slave"
    and
    not mysql.replication.user.pass
  register: mysql.replication.user.pass_command
- set_fact: mysql.replication.user.pass={{ mysql.replication.user.pass_command.stdout }}
  when: >
    mysql.replication.user.pass is not defined
    and
    mysql.replication.user.pass_command is defined


- name: set replication
  mysql_replication:
    mode=changemaster
    master_host={{ mysql.replication.master }}
    master_user={{ mysql.replication.user.name }}
    master_password={{ mysql.replication.user.pass }}
  when: >
    mysql.replication.role == "slave"
    and
    (slave_status | failed or slave_status.Slave_SQL_Running != "Yes")

- name: import dump file
  shell:
    gzip -cd /tmp/mysqldump.sql.gz | mysql
  when: >
    mysql.replication.role == "slave"
    and
    (slave_status | failed or slave_status.Slave_SQL_Running != "Yes")

- name: start replication
  mysql_replication: mode=startslave
  when: >
    mysql.replication.role == "slave"
    and
    (slave_status | failed or slave_status.Slave_SQL_Running != "Yes")
